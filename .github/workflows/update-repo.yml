name: Update APT Repository

on:
  schedule:
    # Check for updates every minute (constant monitoring)
    - cron: '* * * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - '.github/workflows/**'

jobs:
  update-repository:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup GPG
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --sign --armor --detach-sign --output /tmp/test.sig /dev/null || true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev apt-utils gnupg2 curl jq

    - name: Check for new TwintailLauncher release
      id: check_release
      run: |
        # Get latest release info from GitHub API
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/TwintailTeam/TwintailLauncher/releases/latest)
        LATEST_VERSION=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | endswith("_amd64.deb")) | .browser_download_url')
        
        echo "Latest version: $LATEST_VERSION"
        echo "Download URL: $DOWNLOAD_URL"
        
        # Check if we already have this version
        if [ -f "pool/main/t/twintaillauncher/current_version.txt" ]; then
          CURRENT_VERSION=$(cat pool/main/t/twintaillauncher/current_version.txt)
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$LATEST_VERSION" = "$CURRENT_VERSION" ]; then
            echo "No new version available"
            echo "update_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
        
        echo "New version available: $LATEST_VERSION"
        echo "update_needed=true" >> $GITHUB_OUTPUT
        echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT

    - name: Download and process new package
      if: steps.check_release.outputs.update_needed == 'true'
      run: |
        VERSION="${{ steps.check_release.outputs.version }}"
        DOWNLOAD_URL="${{ steps.check_release.outputs.download_url }}"
        
        # Create package directory
        mkdir -p pool/main/t/twintaillauncher
        
        # Download the new .deb package
        echo "Downloading $DOWNLOAD_URL"
        curl -L -o "pool/main/t/twintaillauncher/twintaillauncher_${VERSION#ttl-v}_amd64.deb" "$DOWNLOAD_URL"
        
        # Update version tracking
        echo "$VERSION" > pool/main/t/twintaillauncher/current_version.txt
        
        # Remove old .deb files (keep only the latest)
        find pool/main/t/twintaillauncher -name "*.deb" -not -name "*${VERSION#ttl-v}*" -delete

    - name: Generate repository metadata
      if: steps.check_release.outputs.update_needed == 'true'
      run: |
        # Create Packages file
        cd pool/main/t/twintaillauncher
        dpkg-scanpackages . /dev/null > ../../../../dists/stable/main/binary-amd64/Packages
        
        # Compress Packages file
        cd ../../../../dists/stable/main/binary-amd64
        gzip -k Packages
        
        # Create Release file
        cd ../../
        cat > Release << EOF
        Origin: Twintail-Debian TwintailLauncher Repository
        Label: TwintailLauncher
        Suite: stable
        Codename: stable
        Version: 1.0
        Architectures: amd64
        Components: main
        Description: APT repository for TwintailLauncher
        Date: $(date -Ru)
        EOF
        
        # Add checksums to Release file
        echo "MD5Sum:" >> Release
        find . -name "Packages*" -exec md5sum {} \; | sed 's/\.\///g' | awk '{print " " $1 " " $2}' >> Release
        
        echo "SHA1:" >> Release
        find . -name "Packages*" -exec sha1sum {} \; | sed 's/\.\///g' | awk '{print " " $1 " " $2}' >> Release
        
        echo "SHA256:" >> Release
        find . -name "Packages*" -exec sha256sum {} \; | sed 's/\.\///g' | awk '{print " " $1 " " $2}' >> Release

    - name: Sign Release file
      if: steps.check_release.outputs.update_needed == 'true'
      run: |
        cd dists/stable
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --armor --detach-sign --sign Release
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --clearsign --output InRelease Release

    - name: Export GPG public key
      if: steps.check_release.outputs.update_needed == 'true'
      run: |
        gpg --armor --export > KEY.gpg

    - name: Commit and push changes
      if: steps.check_release.outputs.update_needed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update TwintailLauncher to ${{ steps.check_release.outputs.version }}"
        git push

    - name: Setup Pages
      if: steps.check_release.outputs.update_needed == 'true'
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      if: steps.check_release.outputs.update_needed == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      if: steps.check_release.outputs.update_needed == 'true'
      id: deployment
      uses: actions/deploy-pages@v4
